@{
    ViewData["Title"] = "MaiXIFY";
}
<h1 align="center"></h1>
<h2>
    Hey @ViewData["userName"], welcome to MaiXIFY!<br /><br />
    Just select some Spotify playlist below, and enjoy your new mixed playlist!
</h2>
<br />
<div id="divForMaiXIFYButtonAndSettings" style="display:none">
    <button type="button" class="btn btn-lg btn-default" onclick="MaiXIFY()">MaiXIFY it!</button>
    <br>
    <table>
        <tr>
            <th style="padding:0 15px 0 15px;white-space: nowrap;"><b>MaiXIFY SETTINGS:</b></th>
            <th style="padding:0 15px 0 15px;white-space: nowrap;">Threshold:</th>
            <th style="padding:0 15px 0 15px;white-space: nowrap;"><input id="thresholdRange" name="thresholdRange" type="range" min="0" max="100" step="1" onchange="updateRangeValueInput(this.value);"></th>
            <th style="padding:0 15px 0 15px;white-space: nowrap;"><output id="thersholdLabel" name="thersholdLabel" value="50" text="50">50%</output></th>
            <th style="padding:0 15px 0 15px;white-space: nowrap;"><input id="isRecommendedMusicSet" type="checkbox" name="isRecommendedMusicSet" value="RecommendedMusic">Add some plus recommended track</th>
            <th style="padding:0 15px 0 15px;white-space: nowrap;">Sort options:</th>
            <th style="padding:0 15px 0 15px;white-space: nowrap;">
                <select id="sortOptionDropdownList" name="sortOptionDropdownList">
                    <option value="mostHit">Most Hit</option>
                    <option value="popularity">Popularity</option>
                    <option value="random">Random</option>
                </select>
            </th>
        </tr>
        <tr>
            <th style="padding:0 15px 0 15px;white-space: nowrap;"><b>PLAYLIST SETTINGS: </b></th>
            <th style="padding:0 15px 0 15px;white-space: nowrap;"><input id="displayPlaylistNameField" type="checkbox" name="isNameRequired" value="isNameRequired" onclick="modifiePlaylistNameFields()">Playlist name</th>
            <th id="thForPlaylistNameLabel" style="padding:0 15px 0 15px;display:none;white-space: nowrap;">Mixed playlist's name: </th>
            <th id="thForPlaylistNameInput" style="padding:0 15px 0 15px;display:none;white-space: nowrap;"><input id="mixedPlaylistName" type="text" name="mixedPlaylistName" size="25" value=""></th>
            <th style="padding:0 15px 0 15px;white-space: nowrap;"><input id="isPublic" type="checkbox" name="isPublic" value="Public" checked>Public</th>
            <th style="padding:0 15px 0 15px;white-space: nowrap;"><input id="isCollaborative" type="checkbox" name="isCollaborative" value="Collaborative">Collaborative</th>
            <th></th>
        </tr>
    </table>
</div>
<br />
<div id="divForSelectedPlaylists" style="display:none"><h3>Selected playlists:</h3><br /></div>
<div id="formDiv">
    <hr id="hrForSelectedPlaylists" style="display:none">
    <div id="divForSelectedPlaylists" style="display:none"></div>
    <div id="playlistForm" style="display:inline-block">
        <div id="playlistFormDiv" style="display:block">
            Copy a Spotify playlist URL here:<br />
            <input id="playlistIdInput" type="text" name="playlistIdInput" size="200" value="">
            <button type="submit" id="getPlaylistButton" class="btn btn-sm btn-primary" onclick="getPlaylistByURL()">Get playlist</button>
            <br />
            <br />
        </div>
        <div id="divForSinglePlaylist" name="divForSinglePlaylist" style="display:none"></div>
    </div>
    <hr>
    <div id="spotifyUserForm">
        Or just give a Spotify user name:<br />
        <input id="spotifyUserInput" type="text" name="spotifyUserInput" size="100" value="">
        <button type="submit" id="getUserPlaylistsButton" class="btn btn-sm btn-primary" onclick="getPlaylists()">Get user playlists</button>
        <br />
        <br />
    </div>
</div>
<script src="/js/handlebars-v4.0.5.js"></script>
<script>

    window.onload = (function () {
        $("#playlistIdInput").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#getPlaylistButton").click();
            }
        });

        $("#spotifyUserInput").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#getUserPlaylistsButton").click();
            }
        });
    });    

    var selectedPlaylists = new Array();
    var usersPlaylists = new Array();
    var queriedPlaylistFromUrl;

    function modifiePlaylistNameFields() {
        if (document.getElementById('displayPlaylistNameField').checked) {
            document.getElementById("thForPlaylistNameLabel").style.display = "block";
            document.getElementById("thForPlaylistNameInput").style.display = "block";
        } else {
            document.getElementById("thForPlaylistNameLabel").style.display = "none";
            document.getElementById("thForPlaylistNameInput").style.display = "none";
        }
    }

    function updateRangeValueInput(thresholdValue) {
        document.getElementById('thersholdLabel').value = thresholdValue + '%';
    }

    function MaiXIFY() {
        if (selectedPlaylists.length <= 1) {
            alert("Please select more than one playlist!");
            return;
        }
        else {
            var selectedPlaylistElem = new Array();
            for (i = 0; i < selectedPlaylists.length; i++) {
                var playlistToUploadItem = { "userId": "", "playlistId": "" };
                playlistToUploadItem.userId = selectedPlaylists[i].userId;
                playlistToUploadItem.playlistId = selectedPlaylists[i].playlistId;
                selectedPlaylistElem.push(playlistToUploadItem);
            }
            var playlistName = $('#mixedPlaylistName').val();
            var isPublic = document.getElementById('isPublic').checked;
            var isCollaborative = document.getElementById('isCollaborative').checked;

            var thresholdValue = (document.getElementById('thresholdRange').value / 100).toString();
            var recommendedMusic = document.getElementById('isRecommendedMusicSet').checked;

            var e = document.getElementById("sortOptionDropdownList");
            var sortOption = e.options[e.selectedIndex].value;

            document.cookie = "thresholdSetting" + "=" + thresholdValue;
            document.cookie = "recommendedMusicSetting" + "=" + recommendedMusic;
            document.cookie = "sortOptionSetting" + "=" + sortOption;

            var postData = { selectedPlaylists: selectedPlaylistElem, playlistName: playlistName, isPublic: isPublic, isCollaborative: isCollaborative };

            $.post('@Url.Action("GeneratePlaylist")', postData);
        }
    }


    function isTheSelectedPlaylistsListEmpty() {
        if (selectedPlaylists.length == 0) {
            return true;
        }
        else {
            return false;
        }

    }


    function selectUserPlaylist(playlisId) {
        var id;
        var playlist = { userId: "", playlistId: "", uri: "", name: "" };
        for (i = 0; i < usersPlaylists.length; i++) {
            if (usersPlaylists[i].id == playlisId) {
                id = i;
            }
        }
        playlist.userId = usersPlaylists[id].owner.id;
        playlist.playlistId = usersPlaylists[id].id;
        playlist.uri = usersPlaylists[id].uri;
        playlist.name = usersPlaylists[id].name;
        if (selectedPlaylistContainsPlaylist(playlist.playlistId) == false) {
            selectedPlaylists.push(playlist);
            document.getElementById(playlist.name).innerHTML = "Remove";
            document.getElementById(playlist.name).className = "btn btn-sm btn-danger";
        }
        else {
            for (i = 0; i < selectedPlaylists.length; i++) {
                if (selectedPlaylists[i].playlistId == playlisId) {
                    selectedPlaylists.splice(i, 1);
                    document.getElementById(playlist.name).innerHTML = "Add";
                    document.getElementById(playlist.name).className = "btn btn-sm btn-primary";
                }
            }
        }
        document.getElementById("divForSinglePlaylist").style.display = "none";
        $("#divForSinglePlaylistFromUrl").remove();
        displayPlaylists();
    }


    function displayPlaylists() {
        if (!(isTheSelectedPlaylistsListEmpty())) {
            if (document.getElementById("divForPlaylistsFromSelectedList")) {
                $("#divForPlaylistsFromSelectedList").remove();
            }
            var divForPlaylistsFromSelectedList = '<div id=' + "\"" + "divForPlaylistsFromSelectedList" + "\"" + "style=" + "\"" + "display:inline-block" + "\"" + ">";
            $("#divForSelectedPlaylists").append(divForPlaylistsFromSelectedList);         
            document.getElementById("hrForSelectedPlaylists").style.display = "block";
            document.getElementById("divForMaiXIFYButtonAndSettings").style.display = "inline-block";
            document.getElementById("divForSelectedPlaylists").style.display = "inline-block";
            document.getElementById("divForSelectedPlaylists").style.overflowX = "auto";
            document.getElementById("divForSelectedPlaylists").style.whiteSpace = "nowrap";
            document.getElementById("divForSelectedPlaylists").style.width = "1200px";
            for (i = 0; i < selectedPlaylists.length; i++) {
                var playlistIdParameter = selectedPlaylists[i].playlistId;
                var src = "https://embed.spotify.com/?uri=" + selectedPlaylists[i].uri;
                var playlistElement = '<div ' + 'id=' + "\"" + "divForUserSelectedPlaylists" + "\"" + "style=" + "\"" + "display:inline-block; width: 350px; height: 500px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;" + "\"" + ">" + "<p>" + '<button type=' + "\"" + "button" + "\"" + 'id=' + "\"" + "removeFromSelectedPlaylistsButton" + "\"" + "class=" + "\"" + "btn btn-sm btn-danger" + "\"" + " onclick=" + "\"" + "removeFromFromSelectedPlaylists(" + '\'' + playlistIdParameter + '\'' + ")" + "\"" + '>Remove</button>' + "<b>" + "  " + selectedPlaylists[i].name + "</b>" + "</p>"
                                        + '<iframe src=' + "\"" + src + "\"" + 'width="300" height="380" frameborder="0" allowtransparency="true" ></iframe>' +
                                        "</div>";
                $("#divForPlaylistsFromSelectedList").append(playlistElement);
            }
        }
        else {
            if (document.getElementById("divForPlaylistsFromSelectedList")) {
                $("#divForPlaylistsFromSelectedList").remove();
            }
            document.getElementById("divForSelectedPlaylists").style.display = "none";
            document.getElementById("divForMaiXIFYButtonAndSettings").style.display = "none";
            document.getElementById("hrForSelectedPlaylists").style.display = "none";
        }
    }


    function removeFromFromSelectedPlaylists(playlistId) {
        for (i = 0; i < selectedPlaylists.length; i++) {
            if (selectedPlaylists[i].playlistId == playlistId) {
                selectedPlaylists.splice(i, 1);
                document.getElementById("divForSinglePlaylist").style.display = "none";
                $("#divForSinglePlaylistFromUrl").remove();
                break;
            }
        }
        for (i = 0; i < usersPlaylists.length; i++) {
            if (usersPlaylists[i].id == playlistId) {
                document.getElementById(usersPlaylists[i].name).innerHTML = "Add";
                document.getElementById(usersPlaylists[i].name).className = "btn btn-sm btn-primary";
                break;
            }
        }
        displayPlaylists();
    }


    function selectedPlaylistContainsPlaylist(id) {
        var contains = false;
        for (var i = 0; i < selectedPlaylists.length; i++) {
            if (selectedPlaylists[i].playlistId == id) {
                contains = true;
                break;
            }
        }
        return contains;
    }


    function selectPlaylistFromUrl() {
        var playlist = { userId: "", playlistId: "", uri: "", name: "" };
        playlist.userId = queriedPlaylistFromUrl.owner.id;
        playlist.playlistId = queriedPlaylistFromUrl.id;
        playlist.uri = queriedPlaylistFromUrl.uri;
        playlist.name = queriedPlaylistFromUrl.name;
        if (isPlaylistAlreadySelected(playlist.userId, playlist.playlistId)) {
            for (i = 0; i < selectedPlaylists.length; i++) {
                if (selectedPlaylists[i].playlistId == playlist.playlistId) {
                    selectedPlaylists.splice(i, 1);
                    document.getElementById("divForSinglePlaylist").style.display = "none";
                    $("#divForSinglePlaylistFromUrl").remove();
                    if (usersPlaylists != null) {
                        for (i = 0; i < usersPlaylists.length; i++) {
                            if (usersPlaylists[i].id == playlist.playlistId) {
                                document.getElementById(usersPlaylists[i].name).innerHTML = "Add";
                                document.getElementById(usersPlaylists[i].name).className = "btn btn-sm btn-primary";
                                break;
                            }
                        }
                    }
                }
            }
        }
        else {
            selectedPlaylists.push(playlist);
            document.getElementById("divForSinglePlaylist").style.display = "none";
            $("#divForSinglePlaylistFromUrl").remove();
            if (usersPlaylists != null) {
                for (i = 0; i < usersPlaylists.length; i++) {
                    if (usersPlaylists[i].id == playlist.playlistId) {
                        document.getElementById(usersPlaylists[i].name).innerHTML = "Remove";
                        document.getElementById(usersPlaylists[i].name).className = "btn btn-sm btn-danger";
                        break;
                    }
                }
            }
        }
        displayPlaylists();
    }
    function finishAdding() {
        $('#spotifyUserInput').val('');
        $('#divForPlaylists').remove();
        usersPlaylists = new Array();

    }


    function isPlaylistAlreadySelected(userId, playlistId) {
        var contains = false;
        for (var i = 0; i < selectedPlaylists.length; i++) {
            if (selectedPlaylists[i].playlistId == playlistId && selectedPlaylists[i].userId == userId) {
                contains = true;
                break;
            }
        }
        return contains;
    }


    function getPlaylistByURL() {
        var URL = $('#playlistIdInput').val();
        $('#playlistIdInput').val('');

        if (!($("#divForSinglePlaylist").length === 0)) {
            $("#divForSinglePlaylistFromUrl").remove();
        }

        var playlistPosition = URL.search("/playlist/");
        var playlistPartOfTheURL = URL.slice(playlistPosition, URL.length);
        var playlistId = URL.slice(playlistPosition + 10, URL.length);
        var userId = URL.slice(URL.search("/user/") + 6, playlistPosition);
        var userCountInURL = (URL.match(/\/user\//g) || []).length;
        var playlistCountInURL = (URL.match(/\/playlist\//g) || []).length;

        if(URL.startsWith("open.spotify.com/user/") || URL.startsWith("play.spotify.com/user/")) {
            URL = "http://" + URL; 
        }

        if (!(URL.startsWith("https://open.spotify.com/user/") || URL.startsWith("https://play.spotify.com/user/") || URL.startsWith("http://open.spotify.com/user/") || URL.startsWith("http://play.spotify.com/user/")) || playlistId.length != 22 || userCountInURL != 1 || playlistCountInURL != 1 || userId.length <= 0) {
            alert('This is not a Spotify playlist URL!');
        }
        else {
            $.ajax({
                url: '@Url.Action("GetPlaylist")',
                data: { 'userId': userId, 'playlistId': playlistId },
                type: "post",
                cache: false,
                success: function (playlist) {
                    queriedPlaylistFromUrl = playlist;
                    if (queriedPlaylistFromUrl.hasOwnProperty('errorCode') && queriedPlaylistFromUrl.errorCode == 404) {
                        alert('No such Spotify playlist!')
                        return;
                    }

                    document.getElementById("divForSinglePlaylist").style.display = "inline-block";
                    var src = "https://embed.spotify.com/?uri=" + queriedPlaylistFromUrl.uri;
                    var playlistElement = '<div ' + 'id=' + "\"" + "divForSinglePlaylistFromUrl" + "\"" + "style=" + "\"" + "display:inline-block; width: auto; height: auto; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;" + "\"" + ">" + "<p>" + '<button type=' + "\"" + "button" + "\"" + 'id=' + "\"" + "addPlaylistFromUrlButton" + "\"" + "class=" + "\"" + "btn btn-sm btn-primary" + "\"" + " onclick=" + "\"" + "selectPlaylistFromUrl()" + "\"" + '>Add</button>' + "<b>" + "  " + queriedPlaylistFromUrl.name + "</b>" + "</p>"
                                            + '<iframe src=' + "\"" + src + "\"" + 'width="300" height="380" frameborder="0" allowtransparency="true" ></iframe>' +
                                            "</div>";
                    $("#divForSinglePlaylist").append(playlistElement);
                    if (isPlaylistAlreadySelected(userId, playlistId)) {
                        document.getElementById('addPlaylistFromUrlButton').innerHTML = "Remove";
                        document.getElementById('addPlaylistFromUrlButton').className = "btn btn-sm btn-danger";
                    }

                }
            });
        }
    }


    function getPlaylists() {
        var spotifyUserName = $('#spotifyUserInput').val();
        $('#divForPlaylists').remove();
        if (spotifyUserName.length <= 0) {
            alert('Please add a Spotify username!')
        }
        else {
            $.ajax({
                url: '@Url.Action("GetUserPlaylists")',
                data: { 'userId': spotifyUserName },
                type: "post",
                cache: false,
                success: function (playlists) {
                    usersPlaylists = playlists;
                    if (usersPlaylists.hasOwnProperty('errorCode') && (usersPlaylists.errorCode == 404 || usersPlaylists.errorCode == 503)) {
                        alert('No such Spotify user!')
                        return;
                    }

                    var divForPlaylists = '<div id=' + "\"" + "divForPlaylists" + "\"" + "style=" + "\"" + "display:inline-block" + "\"" + ">" + '<button type=' + "\"" + "button" + "\"" + "style=" + "\"" + "display:block" + "\"" + 'id=' + "finishAddingUsersPlaylistsButton" + "\"" + " class=" + "\"" + "btn btn-sm btn-default" + "\"" + " onclick=" + "\"" + "finishAdding()" + "\"" + '>Rid of them, and give a new Spotify user</button><br>';
                    $("#spotifyUserForm").append(divForPlaylists);
                    for (i = 0; i < usersPlaylists.length; i++) {
                        var src = "https://embed.spotify.com/?uri=" + usersPlaylists[i].uri;
                        var playlistElement = '<div ' + 'id=' + "\"" + "divForSinglePlaylists" + "\"" + "style=" + "\"" + "display:inline-block; width: 350px; height: 500px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;" + "\"" + ">" + "<p>" + '<button type=' + "\"" + "button" + "\"" + 'id=' + "\"" + usersPlaylists[i].name + "\"" + "class=" + "\"" + "btn btn-sm btn-primary" + "\"" + " onclick=" + "\"" + "selectUserPlaylist(" + '\'' + usersPlaylists[i].id + '\'' + ")" + "\"" + '>Add</button>' + "<b>" + "  " + usersPlaylists[i].name + "</b>" + "</p>"
                                                + '<iframe src=' + "\"" + src + "\"" + 'width="300" height="380" frameborder="0" allowtransparency="true" id=' + "\"" + i + "\"" + ' onclick=' + "\"" + "selectUserPlaylist(id)" + "\"" + ' ></iframe>' +
                                                "</div>";
                        $("#divForPlaylists").append(playlistElement);
                        if (selectedPlaylistContainsPlaylist(usersPlaylists[i].id)) {
                            document.getElementById(usersPlaylists[i].name).innerHTML = "Remove";
                            document.getElementById(usersPlaylists[i].name).className = "btn btn-sm btn-danger";
                        }
                    }
                }
            });
        }
    }
</script>
